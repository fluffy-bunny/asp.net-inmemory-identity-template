@page
@model PluginModel
@{
    ViewData["Title"] = "Plugin";
}
@{
    var provider = "google";
    var localhost = $"https://{HttpContext.Request.Host}/Plugin";
}
@section headEnd
{
    <script type="text/javascript" src="~/lib/ternarylabs/porthole/porthole.min.js"></script>
    <script type="text/javascript">
        window.onload = function () {
            Porthole.WindowProxyDispatcher.start();
        };
    </script>
}
@section Scripts
{
    <script src="~/js/fetch-activity-monitor.js" asp-append-version="true"></script>
    <script>

        var windowProxy;
        var hostWindowProxy;
        fetchActivityMonitor.start(() => {
            console.log("fetchActivityMonitor called.")
            if (hostWindowProxy) {
                 hostWindowProxy.post({ 'keepAlive': true });
            }
        });
        document.getElementById('signin').addEventListener("click", signin, false);
        ///////////////////////////////
        // functions for UI elements
        ///////////////////////////////
        function signin() {
            var loginform = document.getElementById("loginform");
            loginform.submit();
        }
        document.getElementById('ping').addEventListener("click", ping, false);

        function ping() {
            fetch("/api/ping", {
                method: 'GET',
                headers: { 'Content-Type': 'text/plain' }

            }).then(function (res) {
                console.log(res);
            });
        }

        function onMessage(messageEvent) {
            /*
           messageEvent.origin: Protocol and domain origin of the message
           messageEvent.data: Message itself
           messageEvent.source: Window proxy object, useful to post a response
           */
            document.getElementById("received-message").innerHTML = JSON.stringify(messageEvent);
        }


        window.onload = function () {
            // Create a proxy window to send to and receive
            // messages from the iFrame
            windowProxy = new Porthole.WindowProxy(
                '/iFrameProxy',
                'guestFrame');
            // Register an event handler to receive messages;
            windowProxy.addEventListener(onMessage);

            var hostPortHole = "@Model.HostPortHole";
            if (hostPortHole) {
                // This is the porthole to the host
                hostWindowProxy = new Porthole.WindowProxy('@Model.HostPortHole');
            }
            if (hostWindowProxy) {
                // Post message back to host that we made it.
                hostWindowProxy.post({ 'plugin': { error: null, name: '@localhost' } });
            }
        };


    </script>
}
<h1>@ViewData["Title"]</h1>

<p>@localhost</p>
<button id='ping'>ping</button>

@{
    if (!User.Identity.IsAuthenticated)
    {
        <button id='signin'>signin</button>
        <p id="received-message">I've heard nothing yet</p>
        <form style="display: none;" id="loginform" target="guestFrame"
              action="/Identity/Account/ExternalLogin?returnUrl=%2FOIDCIFrameResult&amp;errorUrl=%2FOIDCIFrameResult&amp;prompt=none&amp;provider=@provider"
              method="post">
            <div>
                <p>

                    <input type="submit">
                </p>
            </div>
        </form>


        <iframe style="display: none;" id="guestFrame" name="guestFrame" src="/Blank">
            Your browser does not support inline frames.
        </iframe>
    }
}




